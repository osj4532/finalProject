<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="config.mybatis.mapper.oracle.member">
	<select id="selectByCate" resultType="map" parameterType="int">
		select * from memberview where dept_No = #{deptNo} and ranks_No > 1
	</select>
	
	<select id="selectByNo" resultType="map" parameterType="int">
		select * from memberview where mem_No = #{memberNo}
	</select>
	
	<select id="selectPwdForLogin" parameterType="string" resultType="string">
		select mem_Pwd from member
		where mem_Id=#{memId} and mem_ResignDate is null
	</select>
	
	<select id="selectMember" parameterType="string" resultType="memberVo">
		select * from member where mem_Id=#{memId}
	</select>
	
	<select id="selectOrSearch" resultType="map" parameterType="map">
		select * from memberview
		<if test="keyword != null and keyword != ''">
			where mem_name||dept_name||pos_name like '%'||#{keyword}||'%'
		</if>
		order by pos_no
	</select>
	
	<select id="countEmail" resultType="int" parameterType="map">
		select count(*) from memberview
		<if test="keyword != null and keyword != ''">
			where mem_name||dept_name||pos_name like '%'||#{keyword}||'%'
		</if>
		order by pos_no, mem_no
	</select>
	
	<select id="countMember" resultType="int" parameterType="map">
		select count(*) from memberview
		where mem_id != #{memId}
		<if test="keyword != null and keyword != ''">
			and mem_name||dept_name||pos_name like '%'||#{keyword}||'%'
		</if>
		order by pos_no, mem_no
	</select>
	
	<select id="selectOrSearchEmail" resultType="map" parameterType="map">
		select B.*
		from
		(
			select rownum RNUM, A.*
			from(
				select * from memberview
				where mem_ResignDate is null
				<if test="keyword != null and keyword != ''">
					and mem_name||dept_name||pos_name like '%'||#{keyword}||'%'
				</if>
				order by pos_no, mem_no
			)A
<![CDATA[	where rownum <= #{firstRecordIndex}+#{recordCountPerPage}]]>
		)B
		where B.RNUM > #{firstRecordIndex}
	</select>
	
	<select id="selectOrSearchPaging" resultType="map" parameterType="map">
		select B.*
		from
		(
			select rownum RNUM, A.*
			from(
				select * from memberview
				where mem_id != #{memId}
				and mem_ResignDate is null
				<if test="keyword != null and keyword != ''">
					and mem_name||dept_name||pos_name like '%'||#{keyword}||'%'
				</if>
				order by pos_no, mem_no
			)A
<![CDATA[	where rownum <= #{firstRecordIndex}+#{recordCountPerPage}]]>
		)B
		where B.RNUM > #{firstRecordIndex}
	</select>
	
	<insert id="insertMember" parameterType="MemberVo">
		<selectKey resultType="int" keyProperty="memNo" order="BEFORE">
			select member_seq.nextval from dual
		</selectKey>
		insert into member(mem_no, ranks_no, dept_no, mem_name, mem_hp1, mem_hp2, mem_hp3, mem_email1, mem_email2, mem_id, mem_pwd, pos_no
		<if test="memZipcode != null and memZipcode != ''">
			,mem_zipcode, mem_address
		</if>
		<if test="memAddressDetail != null and memAddressDetail != ''">
			,mem_addressdetail
		</if>
		<if test="memFileName != null and memFileName != ''">
			,mem_filename, mem_originalfilename
		</if>
		<if test="memAchievement != null and memAchievement != ''">
			,mem_achievement
		</if>
		<if test="memPay != null and memPay != ''">
			,mem_pay
		</if> 
		<if test="memHoliday != null and memHoliday != ''">
			,mem_holiday
		</if>
		)
		values(#{memNo}, #{ranksNo}, #{deptNo}, #{memName}, #{memHp1}, #{memHp2}, #{memHp3}, #{memEmail1}, #{memEmail2}, #{memId}, #{memPwd}, #{posNo} 
		<if test="memZipcode != null and memZipcode != ''">
			,#{memZipcode}, #{memAddress}
		</if>
		<if test="memAddressDetail != null and memAddressDetail != ''">
			,#{memAddressDetail}
		</if>
		<if test="memFileName != null and memFileName != ''">
			,#{memFileName}, #{memOriginalFileName}
		</if>
		<if test="memAchievement != null and memAchievement != ''">
			,#{memAchievement}
		</if>
		<if test="memPay != null and memPay != ''">
			,#{memPay}
		</if> 
		<if test="memHoliday != null and memHoliday != ''">
			,#{memHoliday}
		</if>
		)		
	</insert>
	
	<select id="dupUserid" parameterType="string" resultType="int">
		select count(*) from member where mem_id=#{memId}
	</select>
	
	
	<select id="selectByMemNotoVo" parameterType="int" resultType="memberVo">
		select * from member
		where mem_no = #{memNo}	
	</select>
	
	<update id="updateMember" parameterType="memberVo">
		update member
		set ranks_no=#{ranksNo}, pos_no=#{posNo}, dept_no=#{deptNo}
		where mem_no=#{memNo}
	</update>
	
	<update id="updateResign" parameterType="int">
		update member
		set mem_resigndate = sysdate
		where mem_no=#{memNo}
	</update>
	
	<update id="changePwd" parameterType="memberVo">
		update member
		set mem_pwd = #{memPwd}
		where mem_no = #{memNo}
	</update>
	
	<update id="updateUser" parameterType="memberVo">
		update member
		set mem_pwd = #{memPwd}, mem_hp1 = #{memHp1}, mem_hp2 = #{memHp2}, mem_hp3 = #{memHp3}
		, mem_email1 = #{memEmail1}, mem_email2 = #{memEmail2}
		<if test="memZipcode != null and memZipcode != ''">
			, mem_zipcode = #{memZipcode}, mem_address = #{memAddress}
		</if>
		<if test="memAddressDetail != null and memAddressDetail != ''">
			, mem_addressdetail = #{memAddressDetail}
		</if>
		<if test="memAchievement != null and memAchievement != ''">
			, mem_achievement = #{memAchievement}
		</if>
		<if test="memFileName != null and memFileName != ''">
			, mem_fileName = #{memFileName}, MEM_ORIGINALFILENAME = #{memOriginalFileName}
		</if>
		where mem_no=#{memNo}
	</update>
	
	<select id="selectMonth" parameterType="int" resultType="int">
		select count(*) from commuteview where memNo = #{memNo} and to_char(comindate, 'yyyy-mm')=to_char(sysdate, 'yyyy-mm') and comindate is not null
	</select>
	
	<select id="selectYear" parameterType="int" resultType="int">
		select count(*) from commuteview where memNo = #{memNo} and to_char(comindate, 'yyyy')=to_char(sysdate, 'yyyy') and comindate is not null
	</select>
	
	<select id="selectYearAll" parameterType="int" resultType="map">
		select to_char(comIndate, 'mm') as month, count(*) as count
		from commuteview
		where memNo = #{memNo}
		and to_char(comIndate, 'yyyy') = to_char(sysdate, 'yyyy')
		group by to_char(comIndate, 'mm')
		order by to_char(comindate, 'mm')
	</select>
	
</mapper>









